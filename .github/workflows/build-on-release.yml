name: Build Artifacts on Release

on:
  push:
    tags:
      - 'v*'
    branches:
      - 'release/**'

jobs:
  check_code:
    name: Check Code Quality on PR
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      - uses: subosito/flutter-action@v1
        with:
          channel: "stable"

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
            .dart_tool
            android/.gradle
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: ${{ runner.os }}-flutter-

      - name: Set up .env
        run: echo "${{ secrets.ENV_FILE }}" > .env

      - run: flutter pub get

      - name: Check formatting
        run: dart format . --set-exit-if-changed || true

      - run: flutter analyze --no-fatal-infos --no-fatal-warnings
      - run: flutter test

  build_android_aab:
    name: Build Android AAB
    runs-on: ubuntu-latest
    needs: [check_code]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      - uses: subosito/flutter-action@v1
        with:
          channel: "stable"

      - name: Set up .env
        run: echo "${{ secrets.ENV_FILE }}" > .env

      - run: flutter pub get
      - run: flutter clean

      - name: Decode keystore from base64
        run: echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > android/app/upload-keystore.jks

      - name: Create key.properties
        run: |
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=upload-keystore.jks" >> android/key.properties


      - run: flutter build appbundle --release

      - name: Upload AAB Artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: app-release-aab
          path: build/app/outputs/bundle/release/app-release.aab

  build_android_apk:
    name: Build Android APK
    runs-on: ubuntu-latest
    needs: [check_code]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      - uses: subosito/flutter-action@v1
        with:
          channel: "stable"

      - name: Set up .env
        run: echo "${{ secrets.ENV_FILE }}" > .env

      - run: flutter pub get
      - run: flutter clean

      - name: Decode keystore from base64
        run: echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > android/app/upload-keystore.jks

      - name: Create key.properties
        run: |
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=upload-keystore.jks" >> android/key.properties

      - run: flutter build apk --release

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: app-release-apk
          path: build/app/outputs/flutter-apk/app-release.apk

  build_ios:
    name: Build iOS
    runs-on: macos-latest
    needs: [check_code]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      - uses: subosito/flutter-action@v1
        with:
          channel: "stable"

      - name: Set up .env
        run: echo "${{ secrets.ENV_FILE }}" > .env

      - run: flutter pub get
      - run: flutter clean
      - run: flutter build ipa --release --no-codesign

      - name: Zip iOS app
        run: |
          cd build/ios/iphoneos
          zip -r Runner.app.zip Runner.app

      - name: Upload iOS app artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: ios-app
          path: build/ios/iphoneos/Runner.app.zip

  upload_to_github_release:
    name: Upload Artifacts to GitHub Release
    runs-on: ubuntu-latest
    needs: [check_code,build_android_aab,build_android_apk,build_ios]
    steps:
      - name: Download APK
        uses: actions/download-artifact@v4
        with:
          name: app-release-apk
          path: artifacts/

      - name: Download AAB
        uses: actions/download-artifact@v4
        with:
          name: app-release-aab
          path: artifacts/

      - name: Download iOS App
        uses: actions/download-artifact@v4
        with:
          name: ios-app
          path: artifacts/

      - name: Display downloaded files
        run: ls -R artifacts

      - name: Upload artifacts to GitHub Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: artifacts/**
          tag: ${{ github.ref_name }}
          overwrite: true
          file_glob: true
          body: "ðŸ“¦ Release ${{ github.ref_name }} build artifacts (AAB, APK, IPA)"
